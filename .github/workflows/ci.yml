name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: hivebox-api
  DOCKER_BUILDKIT: 1

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: ⬇️ Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: 🐍 Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: 3.13

      - name: 📦 Cache pip dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black

      - name: 🧼 Lint Python
        run: |
          black --check .

      - name: 🐳 Lint Dockerfile
        uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf # v3.1.0
        with:
          dockerfile: Dockerfile

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: ⬇️ Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: 🐍 Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: 3.13

      - name: 📦 Cache pip dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest httpx

      - name: 🧪 Run unit and integration tests
        run: |
          PYTHONPATH=. pytest

  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: ⬇️ Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: 📊 SonarQube scan
        uses: SonarSource/sonarqube-scan-action@aecaf43ae57e412bd97d70ef9ce6076e672fe0a9 # v2.3.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          projectBaseDir: .

      - name: ✅ SonarQube Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@d304d050d930b02a896b0f85935344f023928496 # v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - name: 🔍 Run Semgrep
        uses: returntocorp/semgrep-action@713efdd345f3035192eaa63f56867b88e63e4e5d # v1
        with:
          config: "auto"

      - name: 🔐 Terrascan for Kubernetes Manifests
        uses: accurics/terrascan-action@3a6e87da8e244513bd77b631e624552643f794c6 # v1.4.1
        with:
          iac_type: "k8s"
          iac_version: "v1"
          policy_type: "all"
          only_warn: true

  build-and-test-docker:
    needs: [lint, test]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      SENSEBOX_IDS: ${{ vars.SENSEBOX_IDS }}
    outputs:
      next_release_version: ${{ steps.semantic_release.outputs.next_release_version }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: ⬇️ Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: 🔧 Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: "lts/*"
          cache: 'npm'

      - name: 🚀 Run Semantic Release
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release --dry-run > release_output.txt 2>&1 || true
          VERSION=$(grep -oP '(?<=Release note for version )[^ ]+' release_output.txt || echo "")
          if [ -z "$VERSION" ]; then
            echo "No version found from semantic-release, using fallback"
            VERSION="0.0.0-dev"
          fi
          echo "Detected version: $VERSION"
          echo "next_release_version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          push: false
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          build-args: |
            APP_VERSION=${{ steps.semantic_release.outputs.next_release_version }}
            SENSEBOX_IDS=${{ env.SENSEBOX_IDS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: 📦 Prepare artifacts
        run: |
          mkdir -p artifacts/${{ env.IMAGE_NAME }}
          mv /tmp/image.tar artifacts/${{ env.IMAGE_NAME }}/${{ env.IMAGE_NAME }}.tar

      - name: Temporarily save Docker image
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: docker-artifact
          path: artifacts/hivebox-api/hivebox-api.tar
          retention-days: 1

      - name: 🧪 Run tests in Docker container
        run: |
          # Load the image from the tar file
          docker load -i artifacts/${{ env.IMAGE_NAME }}/${{ env.IMAGE_NAME }}.tar
          
          # Run the container
          docker run -d --rm -p 8000:8000 --name test-api ${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Wait for container to be ready with retries
          echo "Waiting for container to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:8000/health > /dev/null 2>&1 || curl -s http://localhost:8000/ > /dev/null 2>&1; then
              echo "Container is ready!"
              break
            fi
            echo "Attempt $i/30: Container not ready yet, waiting..."
            sleep 2
          done
          
          # Test the version endpoint
          echo "Testing version endpoint..."
          curl -s http://localhost:8000/version | grep '"version":"v${{ steps.semantic_release.outputs.next_release_version }}"' || {
            echo "Version test failed. Container logs:"
            docker logs test-api
            docker stop test-api
            exit 1
          }
          
          docker stop test-api

  release:
    needs: [build-and-test-docker, security-scan]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: ⬇️ Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: 🐳 Retrieve saved Docker image
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: docker-artifact
          path: artifacts/

      - name: 🐳 Docker load
        run: |
          docker load < artifacts/hivebox-api/hivebox-api.tar

      - name: 🔐 Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Install Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: "lts/*"
          cache: 'npm'

      - name: 📤 Push Docker image to GitHub Container Registry
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-test-docker.outputs.next_release_version }}
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            APP_VERSION=${{ needs.build-and-test-docker.outputs.next_release_version }}
            SENSEBOX_IDS=${{ vars.SENSEBOX_IDS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 🚀 Run semantic-release (actual release)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
