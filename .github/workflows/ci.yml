name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:

env:
  IMAGE_NAME: hivebox-api

jobs:
  lint-test-build:
    runs-on: ubuntu-latest
    env:
      SENSEBOX_IDS: ${{ vars.SENSEBOX_IDS }}

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest httpx

      - name: 🧪 Run unit and integration tests
        run: |
          PYTHONPATH=. pytest

      - name: 🧼 Lint Python
        run: |
          pip install black
          black --check .

      - name: 🐳 Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

      - name: 🏗️ Build Docker image
        run: | 
          docker build --build-arg SENSEBOX_IDS=${{ env.SENSEBOX_IDS }} -t $IMAGE_NAME:$GITHUB_SHA .
          mkdir -p artifacts/hivebox-api
          docker save $IMAGE_NAME:$GITHUB_SHA > artifacts/hivebox-api/hivebox-api.tar

      - name: Temporarily save Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-artifact
          path: artifacts/hivebox-api/hivebox-api.tar
          retention-days: 1

      - name: 🧪 Run tests in Docker container
        run: |
          docker run -d --rm -p 8000:8000 --name test-api $IMAGE_NAME
          sleep 5
          curl -s http://localhost:8000/version | grep '"version":"v0.0.1"'
          docker stop test-api

      - name: 📊 SonarQube scan
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          projectBaseDir: .

      - name: ✅ SonarQube Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - name: 🔍 Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: "auto"

      - name: 🔐 Terrascan for Kubernetes Manifests
        uses: accurics/terrascan-action@v1
        with:
          iac_type: "k8s"
          iac_version: "v1"
          policy_type: "all"
          only_warn: true

  release:
    needs: lint-test-build
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    if: github.ref == 'refs/heads/main'

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: 🐳 Retrieve saved Docker image
        uses: actions/download-artifact@v2
        with:
          name: docker-artifact
          path: artifacts/hivebox-api/hivebox-api.tar

      - name: 🐳 Docker load
        working-directory: artifacts/hivebox-api
        run: |
          docker load < hivebox-api.tar

      - name: 🔐 Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: 🚀 Run Semantic Release
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(npx semantic-release --dry-run | grep -oP '(?<=Release note for version )[^ ]+')
          echo "next_release_version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: 📤 Push Docker image to GitHub Container Registry
        run: |
          docker tag $IMAGE_NAME:$GITHUB_SHA ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:${{ steps.semantic_release.outputs.next_release_version }}
          docker push ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:${{ steps.semantic_release.outputs.next_release_version }}
      
      - name: 🚀 Run semantic-release (actual release)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release