name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: hivebox-api
  DOCKER_BUILDKIT: 1

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13

      - name: üì¶ Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black

      - name: üßº Lint Python
        run: |
          black --check .

      - name: üê≥ Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13

      - name: üì¶ Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest httpx

      - name: üß™ Run unit and integration tests
        run: |
          PYTHONPATH=. pytest --cov=app --cov-report=xml --cov-report=term-missing

      - name: üìä Upload coverage reports to SonarQube
        run: |
          echo "Coverage report generated at coverage.xml"

  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üìä SonarQube scan
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          projectBaseDir: .

      - name: ‚úÖ SonarQube Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - name: üîç Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: "auto"

      - name: üîê Terrascan for Kubernetes Manifests
        uses: accurics/terrascan-action@v1
        with:
          iac_type: "k8s"
          iac_version: "v1"
          policy_type: "all"
          only_warn: true

  build-and-test-docker:
    needs: [lint, test]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      SENSEBOX_IDS: ${{ vars.SENSEBOX_IDS }}
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üîß Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: 'npm'

      - name: üèóÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üèóÔ∏è Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          build-args: |
            APP_VERSION=${{ github.sha }}
            SENSEBOX_IDS=${{ env.SENSEBOX_IDS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: üì¶ Prepare artifacts
        run: |
          mkdir -p artifacts/${{ env.IMAGE_NAME }}
          mv /tmp/image.tar artifacts/${{ env.IMAGE_NAME }}/${{ env.IMAGE_NAME }}.tar

      - name: üß™ Run tests in Docker container
        run: |
          # Load the image from the tar file
          docker load -i artifacts/${{ env.IMAGE_NAME }}/${{ env.IMAGE_NAME }}.tar
          
          # Run the container
          docker run -d --rm -p 8000:8000 --name test-api ${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Wait for container to be ready with retries
          echo "Waiting for container to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:8000/health > /dev/null 2>&1 || curl -s http://localhost:8000/ > /dev/null 2>&1; then
              echo "Container is ready!"
              break
            fi
            echo "Attempt $i/30: Container not ready yet, waiting..."
            sleep 2
          done
          
          # Test the version endpoint
          echo "Testing version endpoint..."
          curl -s http://localhost:8000/version | grep '"version":"v${{ github.sha }}"' || {
            echo "Version test failed. Container logs:"
            docker logs test-api
            docker stop test-api
            exit 1
          }
          
          docker stop test-api

  release:
    needs: [build-and-test-docker]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      packages: write # to be able to publish a Docker image
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    if: github.ref == 'refs/heads/main'

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: üèóÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name:  Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üîß Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: 'npm'

      - name: üöÄ Run Semantic Release
        id: semantic_release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üì§ Push Docker image to GitHub Container Registry
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/bornegrim/${{ env.IMAGE_NAME }}:${{ steps.semantic_release.outputs.new_release_version }}
            ghcr.io/bornegrim/${{ env.IMAGE_NAME }}:latest
          build-args: |
            APP_VERSION=${{ steps.semantic_release.outputs.new_release_version }}
            SENSEBOX_IDS=${{ vars.SENSEBOX_IDS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
